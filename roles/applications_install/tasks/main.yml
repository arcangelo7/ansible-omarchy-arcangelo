---
- name: Install applications via pacman
  community.general.pacman:
    name: "{{ item.name }}"
    state: present
    update_cache: yes
  loop: "{{ applications_to_install }}"
  when: applications_to_install is defined and applications_to_install | length > 0
  become: yes
  register: apps_install_result

- name: Show application installation results
  debug:
    msg: "{{ item.item.name }} ({{ item.item.description }}) - Status: {{ 'Installed' if item.changed else 'Already present' }}"
  loop: "{{ apps_install_result.results }}"
  when: apps_install_result is defined

- name: Verify applications are installed correctly
  command: "pacman -Q {{ item.name }}"
  loop: "{{ applications_to_install }}"
  register: verify_install
  changed_when: false
  failed_when: false

- name: Show installed versions
  debug:
    msg: "{{ item.stdout }}"
  loop: "{{ verify_install.results }}"
  when: item.rc == 0

- name: Check if AUR applications are already installed
  command: "pacman -Q {{ item.name }}"
  loop: "{{ aur_applications_to_install }}"
  register: aur_check
  changed_when: false
  failed_when: false
  when: aur_applications_to_install is defined and aur_applications_to_install | length > 0

- name: Build AUR packages with yay (without installing)
  shell: "yay -G {{ item.item.name }} && cd {{ item.item.name }} && makepkg -sf --noconfirm"
  args:
    chdir: "/tmp"
  loop: "{{ aur_check.results }}"
  when:
    - aur_applications_to_install is defined
    - aur_applications_to_install | length > 0
    - item.rc != 0
  register: aur_build_result
  ignore_errors: yes

- name: Find built AUR package files
  find:
    paths: "/tmp/{{ item.item.name }}"
    patterns: "{{ item.item.name }}-*.pkg.tar.zst"
    excludes: "*-debug-*.pkg.tar.zst"
  loop: "{{ aur_check.results }}"
  when:
    - aur_applications_to_install is defined
    - aur_applications_to_install | length > 0
    - item.rc != 0
  register: aur_package_files

- name: Install AUR packages with pacman
  community.general.pacman:
    name: "{{ item.files[0].path }}"
    state: present
  loop: "{{ aur_package_files.results }}"
  when:
    - aur_package_files is defined
    - item.files is defined
    - item.files | length > 0
  become: yes
  register: aur_install_result

- name: Show AUR application installation results
  debug:
    msg: "{{ item.item.item.item.name }} ({{ item.item.item.item.description }}) - Status: Installed from AUR"
  loop: "{{ aur_install_result.results }}"
  when:
    - aur_install_result is defined
    - item.changed is defined
    - item.changed

- name: Clean up AUR build directories
  file:
    path: "/tmp/{{ item.item.name }}"
    state: absent
  loop: "{{ aur_check.results }}"
  when:
    - aur_applications_to_install is defined
    - aur_applications_to_install | length > 0
    - item.rc != 0
  ignore_errors: yes

- name: Show already installed AUR applications
  debug:
    msg: "{{ item.item.name }} ({{ item.item.description }}) - Status: Already present"
  loop: "{{ aur_check.results }}"
  when:
    - aur_check is defined
    - item.rc == 0

- name: Verify AUR applications are installed correctly
  command: "pacman -Q {{ item.name }}"
  loop: "{{ aur_applications_to_install }}"
  register: verify_aur_install
  changed_when: false
  failed_when: false
  when: aur_applications_to_install is defined and aur_applications_to_install | length > 0

- name: Show installed AUR versions
  debug:
    msg: "{{ item.stdout }}"
  loop: "{{ verify_aur_install.results }}"
  when:
    - verify_aur_install is defined
    - item.rc == 0

- name: Create icons directory for web apps
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.local/share/applications/icons"
    state: directory
    mode: '0755'
  when: webapps_to_install is defined and webapps_to_install | length > 0
  ignore_errors: yes

- name: Download web app icons
  ansible.builtin.get_url:
    url: "{{ item.icon_url }}"
    dest: "{{ ansible_env.HOME }}/.local/share/applications/icons/{{ item.name }}.png"
    mode: '0644'
  loop: "{{ webapps_to_install }}"
  when: webapps_to_install is defined and webapps_to_install | length > 0
  ignore_errors: yes
  register: webapp_icons_download

- name: Show web app icon download results
  debug:
    msg: "{{ item.item.name }} icon - Status: {{ 'Downloaded' if item.changed else 'Already present or error' }}"
  loop: "{{ webapp_icons_download.results }}"
  when: webapp_icons_download is defined

- name: Create web app desktop files
  ansible.builtin.copy:
    dest: "{{ ansible_env.HOME }}/.local/share/applications/{{ item.name }}.desktop"
    content: |
      [Desktop Entry]
      Version=1.0
      Name={{ item.name }}
      Comment={{ item.description }}
      Exec=omarchy-launch-webapp {{ item.url }}
      Terminal=false
      Type=Application
      Icon={{ ansible_env.HOME }}/.local/share/applications/icons/{{ item.name }}.png
      StartupNotify=true
    mode: '0644'
  loop: "{{ webapps_to_install }}"
  when: webapps_to_install is defined and webapps_to_install | length > 0
  ignore_errors: yes
  register: webapp_desktop_files

- name: Show web app desktop file creation results
  debug:
    msg: "{{ item.item.name }} desktop file - Status: {{ 'Created' if item.changed else 'Already present or error' }}"
  loop: "{{ webapp_desktop_files.results }}"
  when: webapp_desktop_files is defined
