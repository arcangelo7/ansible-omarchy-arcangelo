---
- name: Install Python developer tools via pacman
  community.general.pacman:
    name: "{{ item.name }}"
    state: present
    update_cache: yes
  loop: "{{ python_tools_to_install }}"
  when: python_tools_to_install is defined and python_tools_to_install | length > 0
  become: yes
  register: python_tools_install_result

- name: Show Python tools installation results
  debug:
    msg: "{{ item.item.name }} ({{ item.item.description }}) - Status: {{ 'Installed' if item.changed else 'Already present' }}"
  loop: "{{ python_tools_install_result.results }}"
  when: python_tools_install_result is defined

- name: Verify Python tools are installed correctly
  command: "pacman -Q {{ item.name }}"
  loop: "{{ python_tools_to_install }}"
  register: verify_python_tools
  changed_when: false
  failed_when: false
  when: python_tools_to_install is defined and python_tools_to_install | length > 0

- name: Show installed Python tools versions
  debug:
    msg: "{{ item.stdout }}"
  loop: "{{ verify_python_tools.results }}"
  when:
    - verify_python_tools is defined
    - item.rc == 0

- name: Configure pipx PATH for current user
  ansible.builtin.command: pipx ensurepath
  register: pipx_ensurepath
  changed_when: "'already' not in pipx_ensurepath.stdout"
  failed_when: false
  when: "'python-pipx' in python_tools_to_install | map(attribute='name') | list"

- name: Show pipx ensurepath result
  debug:
    msg: "pipx PATH configuration - Status: {{ 'Configured' if pipx_ensurepath.changed else 'Already configured' }}"
  when:
    - pipx_ensurepath is defined
    - "'python-pipx' in python_tools_to_install | map(attribute='name') | list"

- name: Install Node.js globally via mise
  ansible.builtin.command:
    cmd: "mise use -g node@lts"
  register: mise_node_install
  changed_when: "'installed' in mise_node_install.stderr or 'installed' in mise_node_install.stdout"
  failed_when: mise_node_install.rc != 0

- name: Show Node.js installation status
  debug:
    msg: "Node.js installation status: {{ 'Installed' if mise_node_install.changed else 'Already present' }}"

- name: Install npm packages globally via mise
  ansible.builtin.command:
    cmd: "mise exec -- npm install -g {{ item.name }}"
  loop: "{{ npm_packages_to_install }}"
  when: npm_packages_to_install is defined and npm_packages_to_install | length > 0
  register: npm_install_result
  changed_when: "'added' in npm_install_result.stdout or 'updated' in npm_install_result.stdout"
  failed_when: npm_install_result.rc != 0

- name: Show npm package installation results
  debug:
    msg: "{{ item.item.name }} ({{ item.item.description }}) - Status: {{ 'Installed/Updated' if item.changed else 'Already present' }}"
  loop: "{{ npm_install_result.results }}"
  when: npm_install_result is defined

- name: Verify npm packages are installed correctly
  ansible.builtin.command:
    cmd: "mise exec -- npm list -g --depth=0 {{ item.name }}"
  loop: "{{ npm_packages_to_install }}"
  register: verify_npm_install
  changed_when: false
  failed_when: false
  when: npm_packages_to_install is defined and npm_packages_to_install | length > 0

- name: Show installed npm package versions
  debug:
    msg: "{{ item.stdout_lines | select('search', item.item.name) | first }}"
  loop: "{{ verify_npm_install.results }}"
  when:
    - verify_npm_install is defined
    - item.rc == 0
    - item.stdout_lines | select('search', item.item.name) | list | length > 0

- name: Create development directory
  ansible.builtin.file:
    path: "{{ flutter_install_dir }}"
    state: directory
    mode: '0755'
  when: flutter_install_dir is defined

- name: Check if Flutter is already installed
  ansible.builtin.stat:
    path: "{{ flutter_install_dir }}/flutter"
  register: flutter_installed
  when: flutter_install_dir is defined

- name: Fetch Flutter releases metadata
  ansible.builtin.uri:
    url: "{{ flutter_releases_url }}"
    return_content: yes
  register: flutter_releases_data
  when:
    - flutter_install_dir is defined
    - not flutter_installed.stat.exists

- name: Extract latest stable release info
  ansible.builtin.set_fact:
    flutter_latest_stable: "{{ flutter_releases_data.json.releases | selectattr('channel', 'equalto', 'stable') | first }}"
  when:
    - flutter_install_dir is defined
    - not flutter_installed.stat.exists
    - flutter_releases_data is defined

- name: Show Flutter version to be installed
  debug:
    msg: "Installing Flutter {{ flutter_latest_stable.version }} (latest stable)"
  when:
    - flutter_install_dir is defined
    - flutter_latest_stable is defined

- name: Download Flutter SDK tarball
  ansible.builtin.get_url:
    url: "https://storage.googleapis.com/flutter_infra_release/releases/{{ flutter_latest_stable.archive }}"
    dest: "/tmp/flutter_linux_stable.tar.xz"
    mode: '0644'
  when:
    - flutter_install_dir is defined
    - not flutter_installed.stat.exists
    - flutter_latest_stable is defined
  register: flutter_download

- name: Show Flutter download status
  debug:
    msg: "Flutter SDK tarball - Status: {{ 'Downloaded' if flutter_download.changed else 'Already present' }}"
  when:
    - flutter_install_dir is defined
    - flutter_download is defined

- name: Extract Flutter SDK
  ansible.builtin.unarchive:
    src: "/tmp/flutter_linux_stable.tar.xz"
    dest: "{{ flutter_install_dir }}/"
    remote_src: yes
  when:
    - flutter_install_dir is defined
    - not flutter_installed.stat.exists
    - flutter_latest_stable is defined
  register: flutter_extract

- name: Show Flutter extraction status
  debug:
    msg: "Flutter SDK - Status: {{ 'Extracted' if flutter_extract.changed else 'Already present' }}"
  when:
    - flutter_install_dir is defined
    - flutter_extract is defined

- name: Clean up Flutter tarball
  ansible.builtin.file:
    path: "/tmp/flutter_linux_stable.tar.xz"
    state: absent
  when:
    - flutter_install_dir is defined
    - flutter_download is defined
    - flutter_download.changed

- name: Add Flutter to PATH in .bashrc
  ansible.builtin.lineinfile:
    path: "{{ ansible_env.HOME }}/.bashrc"
    line: 'export PATH="$PATH:{{ flutter_install_dir }}/flutter/bin"'
    state: present
    regexp: 'export PATH="\$PATH:.*/flutter/bin"'
  when: flutter_install_dir is defined

- name: Check Flutter analytics status
  ansible.builtin.shell: |
    {{ flutter_install_dir }}/flutter/bin/flutter config
  register: flutter_config
  changed_when: false
  failed_when: false
  when:
    - flutter_install_dir is defined
    - flutter_installed.stat.exists or (flutter_extract is defined and flutter_extract.changed)

- name: Disable Flutter analytics
  ansible.builtin.shell: |
    {{ flutter_install_dir }}/flutter/bin/flutter config --no-analytics
  when:
    - flutter_install_dir is defined
    - flutter_config is defined
    - flutter_config.stdout is defined
    - '"Analytics reporting is currently disabled" not in flutter_config.stdout'
  register: flutter_analytics_disabled

- name: Show Flutter analytics status
  debug:
    msg: "Flutter analytics - Status: {{ 'Disabled' if flutter_analytics_disabled.changed else 'Already disabled' }}"
  when:
    - flutter_install_dir is defined
    - flutter_config is defined
