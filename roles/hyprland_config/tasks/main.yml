---
- name: Update keybinding for password manager
  ansible.builtin.lineinfile:
    path: "{{ ansible_env.HOME }}/.config/hypr/bindings.conf"
    regexp: '^bindd = SUPER, slash, Passwords, exec, uwsm app -- .*'
    line: 'bindd = SUPER, slash, Passwords, exec, uwsm app -- {{ password_manager_app }}'
    backup: yes
  when: password_manager_app is defined

- name: Remove bloatware keybindings from bindings.conf
  ansible.builtin.lineinfile:
    path: "{{ ansible_env.HOME }}/.config/hypr/bindings.conf"
    regexp: "{{ item.regexp }}"
    state: absent
  loop: "{{ keybindings_to_remove }}"
  when: keybindings_to_remove is defined and keybindings_to_remove | length > 0
  ignore_errors: yes
  register: keybindings_removal_result

- name: Show keybinding removal results
  debug:
    msg: "{{ item.item.description }} - Status: {{ 'Removed' if item.changed else 'Not present' }}"
  loop: "{{ keybindings_removal_result.results }}"
  when: keybindings_removal_result is defined

- name: Update keybindings in bindings.conf
  ansible.builtin.lineinfile:
    path: "{{ ansible_env.HOME }}/.config/hypr/bindings.conf"
    regexp: "{{ item.old_regexp }}"
    line: "{{ item.new_line }}"
    state: present
  loop: "{{ keybindings_to_update }}"
  when: keybindings_to_update is defined and keybindings_to_update | length > 0
  ignore_errors: yes
  register: keybindings_update_result

- name: Show keybinding update results
  debug:
    msg: "{{ item.item.description }} - Status: {{ 'Updated' if item.changed else 'Already correct or not present' }}"
  loop: "{{ keybindings_update_result.results }}"
  when: keybindings_update_result is defined

- name: Add web app keybindings to bindings.conf
  ansible.builtin.lineinfile:
    path: "{{ ansible_env.HOME }}/.config/hypr/bindings.conf"
    regexp: "^bindd.*{{ item.keybinding }}.*{{ item.name }}.*$"
    line: "bindd = {{ item.keybinding }}, {{ item.name }}, exec, omarchy-launch-webapp \"{{ item.url }}\""
    state: present
  loop: "{{ webapps_to_install }}"
  when: webapps_to_install is defined and webapps_to_install | length > 0 and item.keybinding is defined
  ignore_errors: yes
  register: webapp_keybindings_result

- name: Show web app keybinding addition results
  debug:
    msg: "{{ item.item.name }} keybinding ({{ item.item.keybinding }}) - Status: {{ 'Added' if item.changed else 'Already present or error' }}"
  loop: "{{ webapp_keybindings_result.results }}"
  when: webapp_keybindings_result is defined

- name: Add custom keybindings to bindings.conf
  ansible.builtin.lineinfile:
    path: "{{ ansible_env.HOME }}/.config/hypr/bindings.conf"
    regexp: "^bindd.*{{ item.keybinding }}.*{{ item.name }}.*$"
    line: "bindd = {{ item.keybinding }}, {{ item.name }}, exec, {{ item.command }}"
    state: present
  loop: "{{ keybindings_to_add }}"
  when: keybindings_to_add is defined and keybindings_to_add | length > 0
  ignore_errors: yes
  register: custom_keybindings_result

- name: Show custom keybinding addition results
  debug:
    msg: "{{ item.item.description }} ({{ item.item.keybinding }}) - Status: {{ 'Added' if item.changed else 'Already present or error' }}"
  loop: "{{ custom_keybindings_result.results }}"
  when: custom_keybindings_result is defined

- name: Create .local/bin directory
  ansible.builtin.file:
    path: "{{ ansible_env.HOME }}/.local/bin"
    state: directory
    mode: '0755'

- name: Create whispering-toggle script
  ansible.builtin.copy:
    dest: "{{ ansible_env.HOME }}/.local/bin/whispering-toggle"
    content: |
      #!/bin/bash
      # Toggle Whispering recording by focusing the window and sending spacebar

      # Find Whispering window address
      WINDOW_ADDRESS=$(hyprctl clients -j | jq -r '.[] | select(.class=="whispering") | .address' | head -1)

      if [ -z "$WINDOW_ADDRESS" ]; then
          # Whispering not running, launch it
          whispering &
          sleep 2
          WINDOW_ADDRESS=$(hyprctl clients -j | jq -r '.[] | select(.class=="whispering") | .address' | head -1)
      fi

      if [ -n "$WINDOW_ADDRESS" ]; then
          # Focus Whispering window
          hyprctl dispatch focuswindow address:$WINDOW_ADDRESS
          sleep 0.1
          # Send spacebar to toggle recording
          ydotool key 57:1 57:0
      fi
    mode: '0755'

- name: Configure uinput module to load at boot
  ansible.builtin.copy:
    dest: /etc/modules-load.d/uinput.conf
    content: |
      uinput
    mode: '0644'
  become: yes

- name: Add user to input group
  ansible.builtin.user:
    name: "{{ ansible_user_id }}"
    groups: input
    append: yes
  become: yes

- name: Enable ydotool service
  ansible.builtin.systemd:
    name: ydotool.service
    enabled: yes
    scope: user
  ignore_errors: yes

- name: Reload Hyprland configuration
  ansible.builtin.command: hyprctl reload
  ignore_errors: yes
  register: hyprland_reload_result
  changed_when: hyprland_reload_result.rc == 0

- name: Show Hyprland reload result
  debug:
    msg: "Hyprland configuration reload - Status: {{ 'Success' if hyprland_reload_result.rc == 0 else 'Failed' }}"
  when: hyprland_reload_result is defined
